Index: src/sec02/solution/Sec02Solution.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sec02.solution;\n\nimport java.util.ArrayList;\n\npublic class Sec02Solution {\n\n    public Sec02Solution() {}\n\n    /**\n     * section 2 - 1 : 큰 수 찾기\n     * 자신의 앞보다 큰 수 검색\n     */\n    public ArrayList<Integer> printBiggerThanFront(int size, int [] arr) {\n\n        int idx = 0;\n        ArrayList<Integer> ans = new ArrayList<>();\n\n        ans.add(arr[0]);\n        for (int i = 1; i < size;i++) {\n\n            if(arr[i] > arr[i - 1]) {\n               ans.add(arr[i]);\n            }\n\n        }\n\n        return ans;\n\n    }\n\n    /**\n     * section 2 - 2 : 보이는 학생\n     * 볼 수 있는 최대 학생 수 출력\n     */\n    public int calculateVisibleStudent(int studentNumber, int[] height) {\n\n        int max  = height[0], cnt = 1;\n\n        for (int i = 1;i < studentNumber;i++) {\n\n            if (height[i] > max) {\n                max = height[i];\n                cnt++;\n            }\n\n        }\n\n        return cnt;\n\n    }\n\n    /**\n     * section 2 - 3 : 가위바위보\n     *\n     */\n    public char[] whoIsWinner(int rep, int[] A, int []B) {\n\n        final int SCISSORS = 1, ROCK = 2, PAPER = 3;\n\n\n        char[] winner = new char[rep];\n\n        for (int i = 0; i < rep ; i++) {\n\n            if (A[i] == B[i]) {\n                winner[i] = 'D';\n            } else if (A[i] == SCISSORS && B[i] == PAPER) {\n                winner[i] = 'A';\n            } else if (A[i] == ROCK && B[i] == SCISSORS) {\n                winner[i] = 'A';\n            } else if (A[i] == PAPER && B[i] == ROCK) {\n                winner[i] = 'A';\n            } else {\n                winner[i] = 'B';\n            }\n\n        }\n\n        return winner;\n\n    }\n\n    /**\n     * section 2 - 4 : 피보나치 수열\n     */\n    public void fibonacciSequence(int n) {\n\n        int[] ans = new int[n];\n\n        for (int i = 0; i < n ; i++) {\n\n            if (i == 0 || i == 1) {\n                ans[i] = 1;\n            } else {\n                ans[i] = ans[i - 1] + ans[i - 2];\n            }\n\n            System.out.print(ans[i] + \" \");\n        }\n\n    }\n\n    /**\n     * section 2 - 5 : 소수 숫자 세기\n     * 1 ~ N 내에 있는 소수 숫자 세기\n     */\n    public int countDecimalNumber(int n) {\n\n        int answer = 0;\n        int[] arr = new int[n + 1];\n\n        for (int i = 2;i <= n;i++) {\n\n            if (arr[i] == 0) {\n                answer++;\n            }\n\n            for (int j = i;j<=n;j=j+i) { // 1을 제외한 자신보다 작은 자연수의 곱이 아니면 소수\n                arr[j] = 1;\n            }\n\n        }\n\n        return answer;\n\n    }\n\n    /**\n     * section 2 - 6 : 뒤집은 소수\n     */\n    public ArrayList<Integer> reverseNumberIsDecimal(int n, int[] arr) {\n\n        ArrayList<Integer> answer = new ArrayList<>();\n\n        for (int i = 0; i < n ; i++) {\n\n            int tmp = arr[i], reverseN = 0;\n\n            while (tmp > 0) {   // 자연수 뒤집기\n                reverseN = (reverseN * 10) + (tmp % 10);\n                tmp /= 10;\n            }\n\n            if (isPrime(reverseN)) {\n                answer.add(reverseN);\n            }\n        }\n\n        return answer;\n\n    }\n\n    private boolean isPrime(int n) {\n\n        if (n == 1) {\n            return false;\n        }\n\n        for (int i = 2;i < n;i++) {\n            if ((n % i) == 0) {\n                return false;\n            }\n        }\n\n        return true;\n\n    }\n\n    /**\n     * section 2 - 7 : 점수 계산\n     */\n    public int score(int rep, int[] arr) {\n\n        final int CORRECT = 1, WRONG = 0, POINT = 1;\n        int score = 0;\n\n        int mul = 1;\n        for (int i = 0;i < rep;i++) {\n\n            if (arr[i] == CORRECT) {\n                score +=  POINT * (mul++);\n            } else {\n                mul = 1;\n            }\n\n        }\n\n        return score;\n\n    }\n\n    /**\n     * section 2 - 8 : 등수 구하기\n     * 알파벳만 비교하여 회문인지 판단\n     * 대소문자도 구분 X\n     */\n    public int[] ranking(int rep, int[] arr) {\n\n        int[] rank = new int[rep];\n\n        for (int i = 0;i < rep;i++) {\n\n            int cnt = 1;\n\n            for(int j = 0;j < rep;j++) {\n                if (arr[j] > arr[i]) {\n                    cnt++;\n                }\n            }\n\n            rank[i] = cnt;\n\n        }\n\n        return rank;\n    }\n\n    /**\n     * section 2 - 9 : 격자판 최대합\n     *\n     */\n    public int findMatrixMaxSum(int rep, int[][] arr) {\n\n        int max = 0, colSum, rowSum, downLeftSum, upRightSum;\n\n        downLeftSum = upRightSum = 0;\n        for (int i = 0; i < rep;i++) {\n\n            rowSum = colSum = 0;\n\n            for (int j = 0; j < rep;j++) {\n\n                rowSum += arr[i][j];\n                colSum += arr[j][i];\n\n                if (i == j) {\n                    downLeftSum += arr[i][j];\n                }\n\n                if (i + j == (rep - 1)) {\n                    upRightSum += arr[i][j];\n                }\n\n            }\n\n            max = Math.max(max, rowSum);\n            max = Math.max(max, colSum);\n\n        }\n\n        max = Math.max(max, downLeftSum);\n        max = Math.max(max, upRightSum);\n\n        return max;\n\n    }\n\n    /**\n     * section 2 - 10 : 봉우리\n     */\n    public int findTop(int rep, int[][] arr) {\n\n        int ans = 0;\n        int[] dx = {-1, 0, 1, 0};\n        int[] dy = {0, 1, 0, -1};\n\n        for (int i = 0; i < rep;i++) {\n\n            for (int j = 0; j < rep;j++) {\n\n                boolean flag = true;\n\n                for (int k = 0; k < 4; k++) {\n\n                    int x = i + dx[k];\n                    int y = j + dy[k];\n\n                    if ( x >= 0 && x < rep &&  y >= 0 && y < rep && arr[x][y] >= arr[i][j]) {\n                        flag = false;\n                        break;\n                    }\n                }\n\n               if (flag) ans++;\n\n            }\n\n        }\n\n        return ans;\n\n    }\n\n    /**\n     * section 2 - 11 : 임시 반장 정하기\n     */\n    public int selectClassPresident(int rep, int[][] arr) {\n\n        int max = Integer.MIN_VALUE, ans = 0, cnt;\n\n        for (int i = 0; i < rep;i++) {\n\n            cnt = 0;\n\n            for (int j = 0; j < rep;j++) {\n\n                for (int k = 0; k < rep; k++) {\n\n                    if (arr[i][k] == arr[j][k]) {\n                        cnt++;\n                        break;\n                    }\n                }\n            }\n\n            if (max < cnt) {\n                max = cnt;\n                ans = i + 1;\n            }\n\n        }\n\n        return ans;\n\n    }\n\n    /**\n     * section 2 - 12 : 멘토링\n     */\n    public int mentor(int M, int N, int[][] arr) {\n\n        int ans = 0;\n\n        int cnt, ipos, jpos;\n        for (int i = 1; i <= N; i++) {\n            for (int j = 1; j <= N; j++) {\n                cnt = 0;\n                for (int k = 0; k < M; k++) {\n                    ipos = jpos = 0;\n                    for (int s = 0; s < N; s++) {\n\n                        if (arr[k][s] == i) {   // i학생 등수\n                            ipos = s;\n                        }\n\n                        if (arr[k][s] == j) {   // j학생 등수\n                            jpos = s;\n                        }\n\n                    }\n\n                    if (ipos < jpos) { // i 학생이 j 학생 등수보다 앞서면\n                        cnt++;\n                    }\n\n                }\n\n                if (cnt == M) { // i 학생이 j 학생보다 모든 회차에서 우수하면\n                    ans++;\n                }\n\n            }\n\n        }\n\n        return ans;\n\n\n    }\n\n}\n
===================================================================
diff --git a/src/sec02/solution/Sec02Solution.java b/src/sec02/solution/Sec02Solution.java
--- a/src/sec02/solution/Sec02Solution.java	
+++ b/src/sec02/solution/Sec02Solution.java	
@@ -191,8 +191,6 @@
 
     /**
      * section 2 - 8 : 등수 구하기
-     * 알파벳만 비교하여 회문인지 판단
-     * 대소문자도 구분 X
      */
     public int[] ranking(int rep, int[] arr) {
 
